$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 . clk $end
  $var wire 1 / reset $end
  $var wire 2 0 command [1:0] $end
  $var wire 80 1 data_in [79:0] $end
  $var wire 8 4 compressed_in [7:0] $end
  $var wire 8 5 compressed_out [7:0] $end
  $var wire 80 6 decompressed_out [79:0] $end
  $var wire 2 9 response [1:0] $end
  $scope module tb_top $end
   $var wire 1 . clk $end
   $var wire 1 / reset $end
   $var wire 2 0 command [1:0] $end
   $var wire 80 1 data_in [79:0] $end
   $var wire 8 4 compressed_in [7:0] $end
   $var wire 8 5 compressed_out [7:0] $end
   $var wire 80 6 decompressed_out [79:0] $end
   $var wire 2 9 response [1:0] $end
   $scope module cd1_if $end
    $var wire 32 @ DATA_WIDTH [31:0] $end
    $var wire 8 A data_in [7:0] $end
    $var wire 8 B data_out [7:0] $end
    $var wire 8 ? compressed_in [7:0] $end
    $var wire 8 # compressed_out [7:0] $end
    $var wire 8 - decompressed_out [7:0] $end
    $var wire 2 ; command [1:0] $end
    $var wire 2 ' response [1:0] $end
    $var wire 1 C reset $end
   $upscope $end
   $scope module cd1 $end
    $var wire 32 : DICTIONARY_DEPTH [31:0] $end
    $var wire 1 . clk $end
    $var wire 1 / reset $end
    $var wire 2 ; command [1:0] $end
    $var wire 80 < data_in [79:0] $end
    $var wire 8 ? compressed_in [7:0] $end
    $var wire 8 # compressed_out [7:0] $end
    $var wire 80 $ decompressed_out [79:0] $end
    $var wire 2 ' response [1:0] $end
    $var wire 32 ( index_reg [31:0] $end
    $var wire 1 ) data_in_found $end
    $var wire 32 * data_index [31:0] $end
    $var wire 32 + first_empty_index [31:0] $end
    $scope module unnamedblk2 $end
     $var wire 32 , i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00000000000000000000000000000000000000000000000000000000000000000000000000000000 $
b00 '
b00000000000000000000000000000000 (
0)
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000 -
1.
0/
b00 0
b00000000000000000000000000000000000000000000000000000000000000000000000000000000 1
b00000000 4
b00000000 5
b00000000000000000000000000000000000000000000000000000000000000000000000000000000 6
b00 9
b00000000000000000000000100000000 :
b00 ;
b00000000000000000000000000000000000000000000000000000000000000000000000000000000 <
b00000000 ?
b00000000000000000000000000001000 @
b00000000 A
b00000000 B
0C
#1
0.
#2
1)
1.
b01 0
b00000000001101010000000000000000000000000010011000000000000000000000000000100101 1
b11110000 4
#3
0.
#4
1.
#5
0.
#6
1.
#7
0.
#8
1.
#9
0.
#10
1.
#11
0.
#12
1.
#13
0.
#14
1.
#15
0.
#16
1.
#17
0.
#18
1.
#19
0.
#20
1.
#21
0.
#22
1.
#23
0.
#24
1.
#25
0.
#26
1.
#27
0.
#28
1.
#29
0.
#30
1.
#31
0.
#32
1.
#33
0.
#34
1.
#35
0.
#36
1.
#37
0.
#38
1.
#39
0.
#40
1.
#41
0.
#42
1.
#43
0.
#44
1.
#45
0.
#46
1.
#47
0.
#48
1.
#49
0.
