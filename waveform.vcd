$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 4 clk $end
  $var wire 1 5 reset $end
  $var wire 2 6 command [1:0] $end
  $var wire 80 7 data_in [79:0] $end
  $var wire 8 : compressed_in [7:0] $end
  $var wire 8 ; compressed_out [7:0] $end
  $var wire 80 < decompressed_out [79:0] $end
  $var wire 2 ? response [1:0] $end
  $scope module tb_top $end
   $var wire 1 4 clk $end
   $var wire 1 5 reset $end
   $var wire 2 6 command [1:0] $end
   $var wire 80 7 data_in [79:0] $end
   $var wire 8 : compressed_in [7:0] $end
   $var wire 8 ; compressed_out [7:0] $end
   $var wire 80 < decompressed_out [79:0] $end
   $var wire 2 ? response [1:0] $end
   $var wire 80 . getData_in__Vstatic__data [79:0] $end
   $var wire 80 1 getDecompressed_out__Vstatic__data [79:0] $end
   $scope module cd1_if $end
    $var wire 32 F DATA_WIDTH [31:0] $end
    $var wire 8 G data_in [7:0] $end
    $var wire 8 H data_out [7:0] $end
    $var wire 8 E compressed_in [7:0] $end
    $var wire 8 # compressed_out [7:0] $end
    $var wire 8 - decompressed_out [7:0] $end
    $var wire 2 A command [1:0] $end
    $var wire 2 ' response [1:0] $end
    $var wire 1 I reset $end
   $upscope $end
   $scope module cd1 $end
    $var wire 32 @ DICTIONARY_DEPTH [31:0] $end
    $var wire 1 4 clk $end
    $var wire 1 5 reset $end
    $var wire 2 A command [1:0] $end
    $var wire 80 B data_in [79:0] $end
    $var wire 8 E compressed_in [7:0] $end
    $var wire 8 # compressed_out [7:0] $end
    $var wire 80 $ decompressed_out [79:0] $end
    $var wire 2 ' response [1:0] $end
    $var wire 32 ( index_reg [31:0] $end
    $var wire 1 ) data_in_found $end
    $var wire 32 * data_index [31:0] $end
    $var wire 32 + first_empty_index [31:0] $end
    $scope module unnamedblk2 $end
     $var wire 32 , i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00000000000000000000000000000000000000000000000000000000000000000000000000000000 $
b00 '
b00000000000000000000000000000000 (
0)
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000 -
b00000000000000000000000000000000000000000000000000000000000000000000000000000000 .
b00000000000000000000000000000000000000000000000000000000000000000000000000000000 1
14
05
b01 6
b11111111111111111111111111111111111111111111111111111111111111111111111111111111 7
b11110000 :
b00000000 ;
b00000000000000000000000000000000000000000000000000000000000000000000000000000000 <
b00 ?
b00000000000000000000000100000000 @
b00 A
b00000000000000000000000000000000000000000000000000000000000000000000000000000000 B
b00000000 E
b00000000000000000000000000001000 F
b00000000 G
b00000000 H
0I
#1
04
#2
1)
b11111111111111111111111111111111111111111111111111111111111111111111111111111111 .
b11111111111111111111111111111111111111111111111111111111111111111111111111111111 1
14
#3
04
#4
14
#5
04
#6
14
#7
04
#8
14
#9
04
#10
14
#11
04
#12
14
#13
04
#14
14
#15
04
#16
14
#17
04
#18
14
#19
04
#20
14
#21
04
#22
14
#23
04
#24
14
#25
04
#26
14
#27
04
#28
14
#29
04
#30
14
#31
04
#32
14
#33
04
#34
14
#35
04
#36
14
#37
04
#38
14
#39
04
#40
14
#41
04
#42
14
#43
04
#44
14
#45
04
#46
14
#47
04
#48
14
#49
04
