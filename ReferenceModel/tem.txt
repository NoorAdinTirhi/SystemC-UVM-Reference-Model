int sc_main(int, char *[]){

    //initialize random seed
    srand(time(NULL));
    
    //compressor inputs
    sc_signal<bool> clk;
    sc_signal<bool> reset;
    std::vector<sc_signal<bool>> command(2);
    std::vector<sc_signal<bool>> data_in(80);
    std::vector<sc_signal<bool>> compressed_in(COMPRESSED_IN_WIDTH);

    //compressor outputs
    std::vector<sc_signal<bool>> compressed_out(COMPRESSED_IN_WIDTH);
    std::vector<sc_signal<bool>> decompressed_out(80);
    std::vector<sc_signal<bool>> response(2);

    Driver D1("driver");

    Compressor C1 ("compressor");

    Reporter R1 ("reporter");

    sc_trace_file* file = sc_create_vcd_trace_file("trace");


    //binding the modules' ports
    D1.clk(clk);
    C1.clk(clk);
    R1.clk(clk);

    D1.reset(reset);
    C1.reset(reset);
    
    for(int i = 0; i < 2; i++){
        D1.command(command[i]);
        C1.command(command[i]);
        C1.response(response[i]);
        R1.response(response[i]);
        sc_trace(file, command[i], "command");
        sc_trace(file, response[i], "response");
    }
        
    for(int i = 0; i < 80; i++){
        D1.data_in(data_in[i]);
        C1.data_in(data_in[i]);
        C1.decompressed_out(decompressed_out[i]);
        R1.decompressed_out(decompressed_out[i]);
        sc_trace(file, data_in[i], "data_in");
        sc_trace(file, decompressed_out[i], "decompressed_out");
    }
        
    for(int i = 0; i < COMPRESSED_IN_WIDTH; i ++){
        D1.compressed_in(compressed_in[i]);
        C1.compressed_in(compressed_in[i]);
        C1.compressed_out(compressed_out[i]);
        R1.compressed_out(compressed_out[i]);
        sc_trace(file, compressed_in[i], "compressed_in");
        sc_trace(file, compressed_out[i], "compressed_out");
    }
    
    sc_trace(file, clk, "clk");
    sc_trace(file, reset, "reset");
  
    
    sc_start(1000, SC_NS);
    sc_close_vcd_trace_file(file); // close trace file
    return 0;
}

